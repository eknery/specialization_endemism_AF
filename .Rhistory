#loading species occurrences
spp_points=read.table("0_data/spp_points_7km.csv", header =T, sep=",")
# loading raster layers
ras1=raster("0_data/rasters/temperature_diurnal_range")
ras2=raster("0_data/rasters/precipitation_seasonality")
ras3=raster("0_data/rasters/solar_radiation")
## loading packages
library("raster")
library("sf")
ras2=raster("0_data/rasters/precipitation_seasonality")
ras3=raster("0_data/rasters/solar_radiation")
spp_points
solar = raster::extract(ras3,spp_points[,2:3])
solar
solar = cbind(spp_points$species, solar)
solar
solar = cbind(spp_points$species, as.numeric(solar) )
solar
solar
solar = raster::extract(ras3,spp_points[,2:3])
solar = cbind(spp_points$species, as.numeric(solar) )
solar
as.data.frame(cbind(spp_points$species, as.numeric(solar) ) )
as.data.frame(cbind(spp_points$species, solar ) )
solar = raster::extract(ras3,spp_points[,2:3])
solar = as.data.frame(cbind(spp_points$species, solar ) )
View(solar)
colnames(solar)[1] = "species"
solar %>%
group_by(species) %>%
reframe(solar = median(solar))
solar %>%
group_by(species) %>%
reframe(solar = median(solar))
if (!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
solar %>%
group_by(species) %>%
reframe(solar = median(solar))
solar %>%
mutate(solar = as.numeric(solar)) %>%
group_by(species) %>%
reframe(solar = median(solar))
solar %>%
mutate(solar = as.numeric(solar)) %>%
group_by(species) %>%
reframe(solar = median(solar, na.rm= T))
med_solar = solar %>%
mutate(solar = as.numeric(solar)) %>%
group_by(species) %>%
reframe(solar = median(solar, na.rm= T))
View(med_solar)
ph = raster::extract(ras4,spp_points[,2:3])
t
ras4=raster("0_data/rasters/soil_pH")
ph = raster::extract(ras4,spp_points[,2:3])
ph = as.data.frame(cbind(spp_points$species, ph ) )
colnames(ph)[1] = "species"
med_ph = ph %>%
mutate(ph = as.numeric(ph)) %>%
group_by(species) %>%
reframe(ph = median(ph, na.rm= T))
View(med_ph)
### require packages
library(tidyverse)
library(PupillometryR)
library(ggpubr)
library(readr)
library(tidyr)
library(ggplot2)
library(Hmisc)
library(plyr)
library(RColorBrewer)
library(reshape2)
# my colors
mycols = c( "#1E88E5", "#FFC107", "#D81B60")
### loading data
spp_rao = read.table("2_environmental_heterogeneity/spp_rao.csv",
header =T, sep=",",  na.strings = "NA", fill=T)
spp_altitude = read.table("2_environmental_heterogeneity/spp_altitude.csv",
header =T, sep=",",  na.strings = "NA", fill=T)
spp_hvolumes = read.table("3_hypervolume_inference/spp_hvolumes.csv",
header =T, sep=",",  na.strings = "NA", fill=T)
spp_range = read.table("4_range_inference/spp_range.csv",
header =T, sep=",",  na.strings = "NA", fill=T)
# organizing dataset to plot
spp_dataset = data.frame(spp_rao,
spp_altitude$altitude,
spp_hvolumes$hvolume,
spp_range$range)
colnames(spp_dataset)[4:6] = c("altitude", "hvolume","range")
### packages
library(rexpokit)
library(cladoRcpp)
library(BioGeoBEARS)
library(ape)
library(phytools)
library(geiger)
library(OUwie)
library(nlme)
### my own functions
source("./5_comparative_analysis/function_fit_evo_models.R")
### spp geographic distribution
spp_geographic_distribution = read.table("1_geographic_classification/spp_geographic_distribution.csv", sep=',', h=T)
# named geographic states
state = spp_geographic_distribution$state
names(state) = spp_geographic_distribution$species
### reading rao values
spp_rao = read.table("2_environmental_heterogeneity/spp_rao.csv", header =T, sep=",",  na.strings = "NA", fill=T)
#named rao
rao = spp_rao$rao
names(rao) = spp_rao$species
### reading altitude values
spp_altitude = read.table("2_environmental_heterogeneity/spp_altitude.csv",
header =T, sep=",",  na.strings = "NA", fill=T)
altitude = spp_altitude$altitude
names(altitude) = spp_altitude$species
### reading hvolume data
regimes_hvolumes = read.table("3_hypervolume_inference/regimes_hvolumes.csv",
sep=",", h=T)
# named hvolumes
hvolume = regimes_hvolumes$hvolume
names(hvolume) = regimes_hvolumes$species
### reading range data
regimes_ranges = read.table("4_range_inference/regimes_ranges.csv", header =T, sep=",",  na.strings = "NA", fill=T)
# named ranges
range = regimes_ranges$range
names(range) = regimes_ranges$species
### reading autocorrelation data
spp_moran = read.table("4_range_inference/spp_moran.csv", header =T, sep=",",  na.strings = "NA", fill=T)
# named autocorrelation
moran = apply(spp_moran[,2:5], MARGIN = 1, mean)
names(moran) = spp_moran$species
### rao
# comparing models
fit_bm_rao = fitContinuous(phy= mcc, rao,  model="BM")
### mcc tree
mcc_fn = c("0_data/mcc_phylo.nwk")
mcc = read.tree(mcc_fn)
### rao
# comparing models
fit_bm_rao = fitContinuous(phy= mcc, rao,  model="BM")
fit_ou_rao = fitContinuous(phy= mcc, rao,  model="OU")
# aicc
c(fit_bm_rao$opt$aicc, fit_ou_rao$opt$aicc)
names(rao)
# correlation structure
cor_rao = corMartins(rao, phy = mcc, form = ~names(rao))
spp = names(rao)
# correlation structure
cor_rao = corMartins(rao, phy = mcc, form = ~spp)
spp = names(rao)
# correlation structure
cor_rao = corMartins(rao, phy = mcc, form = ~spp)
# correlation structure
cor_rao = corMartins(phy = mcc, form = ~spp)
# correlation structure
cor_rao = corMartins(value = rao, phy = mcc, form = ~spp)
fit_ou_rao
# correlation structure
cor_rao = corMartins(value = 0.31, phy = mcc, form = ~spp)
# pgls rao vs geographcic state
fit_gls_rao = gls(log(rao) ~ state, correlation=cor_rao,  method = "REML")
summary(fit_gls_rao)
### hvolumes
# comparing models
fit_bm_hv = fitContinuous(phy= mcc, hvolume,  model="BM")
fit_ou_hv = fitContinuous(phy= mcc, hvolume,  model="OU")
# aicc
c(fit_bm_hv$opt$aicc, fit_ou_hv$opt$aicc)
# correlation matrix
cor_hv = corMartins(2.71, phy = mcc, form = ~spp)
# pgls hvolumes ~ geographic distribution
fit_gls_hv = gls(sqrt(hvolume) ~ state + moran, correlation=cor_hv,  method = "REML")
summary(fit_gls_hv)
### range size
# comparing models
fit_bm_range = fitContinuous(phy= mcc, range,  model="BM")
fit_ou_range = fitContinuous(phy= mcc, range,  model="OU")
c(fit_bm_range$opt$aicc, fit_ou_range$opt$aicc)
# correlation structure
cor_ran = corMartins(2.71, phy = mcc, form = ~spp)
### range size
# comparing models
fit_bm_range = fitContinuous(phy= mcc, range^(1/3),  model="BM")
fit_ou_range = fitContinuous(phy= mcc, range^(1/3),  model="OU")
c(fit_bm_range$opt$aicc, fit_ou_range$opt$aicc)
fit_ou_range
# correlation structure
cor_ran = corMartins(0.37, phy = mcc, form = ~spp)
# pgls range size vs hvolume
cubic_range = range^(1/3)
fit_gls_ran = gls(cubic_range ~ state/hvolume , correlation=cor_ran,  method = "REML")
summary(fit_gls_ran)
fit_gls_ran = gls(cubic_range ~ hvolume:state , correlation=cor_ran,  method = "REML")
summary(fit_gls_ran)
fit_gls_ran = gls(cubic_range ~ hvolume/state , correlation=cor_ran,  method = "REML")
summary(fit_gls_ran)
fit_gls_ran = gls(cubic_range ~ hvolume , correlation=cor_ran,  method = "REML")
summary(fit_gls_ran)
### hvolumes
# comparing models
fit_bm_hv = fitContinuous(phy= mcc, sqrt(hvolume),  model="BM")
fit_ou_hv = fitContinuous(phy= mcc, sqrt(hvolume),  model="OU")
# aicc
c(fit_bm_hv$opt$aicc, fit_ou_hv$opt$aicc)
fit_ou_hv
# correlation matrix
cor_hv = corMartins(2.22, phy = mcc, form = ~spp)
# pgls hvolumes ~ geographic distribution
fit_gls_hv = gls(sqrt(hvolume) ~ state + moran, correlation=cor_hv,  method = "REML")
summary(fit_gls_hv)
